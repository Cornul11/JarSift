package nl.tudelft.cornul11.thesis.service;

import com.fasterxml.jackson.databind.ObjectMapper;
import nl.tudelft.cornul11.thesis.api.ApiResponse;
import nl.tudelft.cornul11.thesis.api.PostRequestClient;
import nl.tudelft.cornul11.thesis.api.Schema;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.IOException;
import java.text.DecimalFormat;
import java.util.*;

public class VulnerabilityAnalyzer {
    private static final Logger logger = LoggerFactory.getLogger(VulnerabilityAnalyzer.class);
    private final PostRequestClient postRequestClient;
    private final ObjectMapper objectMapper = new ObjectMapper();
    private final int totalClassFileCount;

    public VulnerabilityAnalyzer(PostRequestClient postRequestClient, int totalClassFileCount) {
        this.totalClassFileCount = totalClassFileCount;
        this.postRequestClient = postRequestClient;
    }

    public void checkForVulnerability(Map<String, Long> libraryVersionMap) {
        List<LibraryLogData> logData = new ArrayList<>();
        for (Map.Entry<String, Long> entry : libraryVersionMap.entrySet()) {
            try {
                LibraryVersion libraryVersion = getLibraryVersion(entry);
                long classFileCount = libraryVersion.getCount(); // replace with your method to count files
                ApiResponse responseObject = processLibraryVersion(libraryVersion);
                logData.add(new LibraryLogData(libraryVersion, responseObject, classFileCount));
            } catch (IOException e) {
                logger.error("Error during processing: " + e.getMessage());
            }
        }

        // Sort in decreasing order of count
        logData.sort((data1, data2) -> Long.compare(data2.getLibraryVersion().getCount(), data1.getLibraryVersion().getCount()));

        // Log results
        for (LibraryLogData data : logData) {
            logResult(data.getLibraryVersion(), data.getResponseObject());
        }
    }

    private LibraryVersion getLibraryVersion(Map.Entry<String, Long> entry) {
        String[] parts = entry.getKey().split(":");
        String library = parts[0] + ":" + parts[1];
        String version = parts[2];
        long count = entry.getValue();

        return new LibraryVersion(library, version, count);
    }

    private ApiResponse processLibraryVersion(LibraryVersion libraryVersion) throws IOException {
        ObjectMapper objectMapper = new ObjectMapper();

        // prepare the JSON data
        Map<String, Object> data = new HashMap<>();
        data.put("version", libraryVersion.getVersion());
        data.put("package", Map.of("name", libraryVersion.getLibrary(), "ecosystem", "Maven"));

        String response = postRequestToApi(objectMapper, data);
        return objectMapper.readValue(response, ApiResponse.class);
    }

    private String postRequestToApi(ObjectMapper objectMapper, Map<String, Object> data) throws IOException {
        String jsonData = objectMapper.writeValueAsString(data);
        String url = "https://api.osv.dev/v1/query";
        return postRequestClient.makePostRequest(url, jsonData);
    }


    private void logResult(LibraryVersion libraryVersion, ApiResponse responseObject) {
        DecimalFormat decimalFormat = new DecimalFormat("#.##");
        double percentage = (libraryVersion.getCount() * 100.0) / totalClassFileCount;
        String percentageString = decimalFormat.format(percentage);

        StringBuilder status;
        if (responseObject.getVulns() == null) {
            status = new StringBuilder("✅");
        } else {
            status = new StringBuilder("❌");
            for (Schema schema : responseObject.getVulns()) {
                status.append(" -> ").append(schema.getAliases().get(0));
            }
        }

        String output = String.format("Library-Version: %s:%s, Count: %d / %d (%s%%) %s",
                libraryVersion.getLibrary(), libraryVersion.getVersion(), libraryVersion.getCount(), totalClassFileCount, percentageString, status);

        logger.info(output);
    }

    class LibraryVersion {
        private final String library;
        private final String version;
        private final long count;

        public LibraryVersion(String library, String version, long count) {
            this.library = library;
            this.version = version;
            this.count = count;
        }

        public String getLibrary() {
            return library;
        }

        public String getVersion() {
            return version;
        }

        public long getCount() {
            return count;
        }
    }

    class LibraryLogData {
        LibraryVersion libraryVersion;
        ApiResponse responseObject;
        long classFileCount;

        public LibraryLogData(LibraryVersion libraryVersion, ApiResponse responseObject, long classFileCount) {
            this.libraryVersion = libraryVersion;
            this.responseObject = responseObject;
            this.classFileCount = classFileCount;
        }

        public LibraryVersion getLibraryVersion() {
            return libraryVersion;
        }

        public ApiResponse getResponseObject() {
            return responseObject;
        }

        public long getClassFileCount() {
            return classFileCount;
        }
    }
}