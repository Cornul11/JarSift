package nl.tudelft.cornul11.thesis.service;

import com.fasterxml.jackson.databind.ObjectMapper;
import nl.tudelft.cornul11.thesis.api.ApiResponse;
import nl.tudelft.cornul11.thesis.api.PostRequestClient;
import nl.tudelft.cornul11.thesis.api.Schema;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.IOException;
import java.text.DecimalFormat;
import java.util.*;

public class VulnerabilityAnalyzer {
    private static final Logger logger = LoggerFactory.getLogger(VulnerabilityAnalyzer.class);
    public static final double THRESHOLD = 0.8;
    private final PostRequestClient postRequestClient;
    private final int totalClassFileCount;

    public VulnerabilityAnalyzer(PostRequestClient postRequestClient, int totalClassFileCount) {
        this.totalClassFileCount = totalClassFileCount;
        this.postRequestClient = postRequestClient;
    }

    public void checkForVulnerability(Map<String, Map<String, Object>> libraryVersionMap) {
        List<LibraryLogData> logData = new ArrayList<>();
        for (Map.Entry<String, Map<String, Object>> entry : libraryVersionMap.entrySet()) {
            long classFileCount = (long) entry.getValue().get("count");
            long totalCount = (long) entry.getValue().get("total");
            double ratio = (double) entry.getValue().get("ratio");

            if (ratio >= THRESHOLD) { // TODO: make this a parameter, or make it configurable;
                try {
                    LibraryVersion libraryVersion = getLibraryVersion(entry);
                    ApiResponse responseObject = processLibraryVersion(libraryVersion);
                    logData.add(new LibraryLogData(libraryVersion, responseObject, classFileCount, totalCount, ratio));
                } catch (IOException e) {
                    logger.error("Error during processing: " + e.getMessage());
                }
            }
        }

        // Sort in decreasing order of count
        logData.sort((data1, data2) -> Long.compare(data2.getLibraryVersion().getCount(), data1.getLibraryVersion().getCount()));

        // Log results
        for (LibraryLogData data : logData) {
            logResult(data.getLibraryVersion(), data.getResponseObject());
        }

        if (logData.size() == 0) {
            logger.info("No matches or vulnerabilities found");
        }
    }

    private LibraryVersion getLibraryVersion(Map.Entry<String, Map<String, Object>> entry) {
        String[] parts = entry.getKey().split(":");
        String library = parts[0] + ":" + parts[1];
        String version = parts[2];
        long count = (long)entry.getValue().get("count");
        long total = (long)entry.getValue().get("total");
        double ratio = (double)entry.getValue().get("ratio");

        return new LibraryVersion(library, version, count, total, ratio);

    }

    private ApiResponse processLibraryVersion(LibraryVersion libraryVersion) throws IOException {
        ObjectMapper objectMapper = new ObjectMapper();

        // prepare the JSON data
        Map<String, Object> data = new HashMap<>();
        data.put("version", libraryVersion.getVersion());
        data.put("package", Map.of("name", libraryVersion.getLibrary(), "ecosystem", "Maven"));

        String response = postRequestToApi(objectMapper, data);
        return objectMapper.readValue(response, ApiResponse.class);
    }

    private String postRequestToApi(ObjectMapper objectMapper, Map<String, Object> data) throws IOException {
        String jsonData = objectMapper.writeValueAsString(data);
        String url = "https://api.osv.dev/v1/query";
        return postRequestClient.makePostRequest(url, jsonData);
    }


    private void logResult(LibraryVersion libraryVersion, ApiResponse responseObject) {
        DecimalFormat decimalFormat = new DecimalFormat("#.##");
        double libraryPercentage = libraryVersion.getRatio() * 100;
        double overallPercentage = (libraryVersion.getCount() * 100.0) / totalClassFileCount;
        String libraryPercentageString = decimalFormat.format(libraryPercentage);
        String overallPercentageString = decimalFormat.format(overallPercentage);

        StringBuilder status;
        if (responseObject.getVulns() == null) {
            status = new StringBuilder("✅");
        } else {
            status = new StringBuilder("❌");
            for (Schema schema : responseObject.getVulns()) {
                status.append(" -> ").append(schema.getAliases().get(0));
            }
        }

        String output = String.format("Library-Version: %s:%s, Count: %d / %d (Library ratio: %s%%, Overall ratio: %s%%) %s",
                libraryVersion.getLibrary(), libraryVersion.getVersion(), libraryVersion.getCount(), libraryVersion.getTotal(), libraryPercentageString, overallPercentageString, status);


        logger.info(output);
    }

    class LibraryVersion {
        private final String library;
        private final String version;
        private final long count;
        private final long total;
        private final double ratio;

        public LibraryVersion(String library, String version, long count, long total, double ratio) {
            this.library = library;
            this.version = version;
            this.count = count;
            this.total = total;
            this.ratio = ratio;
        }

        public String getLibrary() {
            return library;
        }

        public String getVersion() {
            return version;
        }

        public long getCount() {
            return count;
        }

        public long getTotal() {
            return total;
        }

        public double getRatio() {
            return ratio;
        }
    }

    class LibraryLogData {
        LibraryVersion libraryVersion;
        ApiResponse responseObject;
        long classFileCount;
        long totalClassFileCount;
        double ratio;

        public LibraryLogData(LibraryVersion libraryVersion, ApiResponse responseObject, long classFileCount, long totalClassFileCount, double ratio) {
            this.libraryVersion = libraryVersion;
            this.responseObject = responseObject;
            this.classFileCount = classFileCount;
            this.totalClassFileCount = totalClassFileCount;
            this.ratio = ratio;
        }

        public LibraryVersion getLibraryVersion() {
            return libraryVersion;
        }

        public ApiResponse getResponseObject() {
            return responseObject;
        }

        public long getClassFileCount() {
            return classFileCount;
        }
    }
}