package nl.tudelft.cornul11.thesis.service;

import com.fasterxml.jackson.databind.ObjectMapper;
import nl.tudelft.cornul11.thesis.api.ApiResponse;
import nl.tudelft.cornul11.thesis.api.PostRequestClient;
import nl.tudelft.cornul11.thesis.api.Schema;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.IOException;
import java.text.DecimalFormat;
import java.util.Collections;
import java.util.HashMap;
import java.util.Map;

public class VulnerabilityAnalyzer {
    private static final Logger logger = LoggerFactory.getLogger(VulnerabilityAnalyzer.class);
    private final PostRequestClient postRequestClient;
    private final ObjectMapper objectMapper = new ObjectMapper();

    public VulnerabilityAnalyzer(PostRequestClient postRequestClient) {
        this.postRequestClient = postRequestClient;
    }

    public void checkForVulnerability(Map<String, Map<String, Long>> libraryVersionMap, int classFileCount) throws IOException {
        DecimalFormat decimalFormat = new DecimalFormat("#.##");
        for (Map.Entry<String, Map<String, Long>> entry : libraryVersionMap.entrySet()) {
            // TODO: ugly code, refactor
            String library = entry.getKey();
            String maxVersion = Collections.max(entry.getValue().entrySet(), Map.Entry.comparingByValue()).getKey();
            long maxCount = entry.getValue().get(maxVersion);

            double percentage = (maxCount * 100.0) / classFileCount;
            String percentageString = decimalFormat.format(percentage);

            // prepare the JSON data
            Map<String, Object> data = new HashMap<>();
            data.put("version", maxVersion);
            data.put("package", Map.of("name", library, "ecosystem", "Maven"));


            String response = "{}";

            try {
                String jsonData = objectMapper.writeValueAsString(data);
//                System.out.println("SENDING:");
//                System.out.println(jsonData);
//                System.out.println("GETTING:");
                String url = "https://api.osv.dev/v1/query";
                response = postRequestClient.makePostRequest(url, jsonData);
            } catch (IOException e) {
                System.out.println("Error during processing: " + e.getMessage());
            }



            ObjectMapper objectMapper = new ObjectMapper();
            // response should contain an object vulns which is an array of vulnerabilities
            // how do I check if the array is empty?
            ApiResponse responseObject = objectMapper.readValue(response, ApiResponse.class);

            StringBuilder status;
            if (responseObject.getVulns() == null) {
                status = new StringBuilder("✅");
            } else {
                status = new StringBuilder("❌");
                for (Schema schema : responseObject.getVulns()) {
                    status.append(" -> ").append(schema.getAliases().get(0));
                }

            }
            String output = String.format("Library-Version: %s-%s, Count: %d / %d (%s%%) %s",
                    library, maxVersion, maxCount, classFileCount, percentageString, status.toString());

            logger.info(output);

        }
    }
}