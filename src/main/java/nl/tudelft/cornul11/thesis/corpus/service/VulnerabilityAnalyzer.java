package nl.tudelft.cornul11.thesis.corpus.service;

import nl.tudelft.cornul11.thesis.corpus.database.MongoDbClient;
import nl.tudelft.cornul11.thesis.corpus.util.ConfigurationLoader;
import org.bson.Document;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

public class VulnerabilityAnalyzer {
    private static final Logger logger = LoggerFactory.getLogger(VulnerabilityAnalyzer.class);
    public static final double THRESHOLD = 0.8;
    private final MongoDbClient mongoDbClient;
    private final int totalClassFileCount;
    private final ConfigurationLoader config;

    public VulnerabilityAnalyzer(int totalClassFileCount, ConfigurationLoader config) {
        this.totalClassFileCount = totalClassFileCount;
        this.config = config;
        this.mongoDbClient = new MongoDbClient(config);
    }

    public void checkForVulnerability(Map<String, Map<String, Object>> libraryVersionMap) {
        List<LibraryVersion> libraryVersions = new ArrayList<>();
        for (Map.Entry<String, Map<String, Object>> entry : libraryVersionMap.entrySet()) {
            double ratio = (double) entry.getValue().get("ratio");

            if (ratio >= THRESHOLD) { // TODO: make this a parameter, or make it configurable;
                LibraryVersion libraryVersion = getLibraryVersion(entry);
                libraryVersions.add(libraryVersion);
            }
        }

        // Sort in decreasing order of count
        libraryVersions.sort((lib1, lib2) -> Long.compare(lib2.getCount(), lib1.getCount()));

        // Log results
        for (LibraryVersion libraryVersion : libraryVersions) {
            ArrayList<Document> vulnerabilitiesList = mongoDbClient.getVulnerabilities(libraryVersion.getLibrary(), libraryVersion.getVersion());
            logResult(libraryVersion, vulnerabilitiesList);
        }

        if (libraryVersions.size() == 0) {
            logger.info("No matches or vulnerabilities found");
        }
    }

    private LibraryVersion getLibraryVersion(Map.Entry<String, Map<String, Object>> entry) {
        String[] parts = entry.getKey().split(":");
        String library = parts[0] + ":" + parts[1];
        String version = parts[2];
        long count = (long) entry.getValue().get("count");
        long total = (long) entry.getValue().get("total");
        double ratio = (double) entry.getValue().get("ratio");

        return new LibraryVersion(library, version, count, total, ratio);
    }

    private void logResult(LibraryVersion libraryVersion, ArrayList<Document> vulnList) {
        DecimalFormat decimalFormat = new DecimalFormat("#.##");
        double libraryPercentage = libraryVersion.getRatio() * 100;
        double overallPercentage = (libraryVersion.getCount() * 100.0) / totalClassFileCount;
        String libraryPercentageString = decimalFormat.format(libraryPercentage);
        String overallPercentageString = decimalFormat.format(overallPercentage);

        StringBuilder status;
        if (vulnList.isEmpty()) {
            status = new StringBuilder("✅");
        } else {
            status = new StringBuilder("❌");
            try {
                for (Document vuln : vulnList) {
                    Object aliasesField = vuln.get("aliases");
                    if (aliasesField == null) {
                        status.append(" -> ").append(vuln.get("id"));
                    } else if (aliasesField instanceof List && !((List<?>) aliasesField).isEmpty()) {
                        List<?> aliases = (List<?>) aliasesField;
                        Object firstAlias = aliases.get(0);
                        status.append(" -> ").append((String) firstAlias);
                    }
                }
            } catch (Exception e) {
                logger.error("Error while processing library version: " + libraryVersion.getVersion(), e);
            }
        }

        String output = String.format("Library-Version: %s:%s, Count: %d / %d (Library ratio: %s%%, Overall ratio: %s%%) %s",
                libraryVersion.getLibrary(), libraryVersion.getVersion(), libraryVersion.getCount(), libraryVersion.getTotal(), libraryPercentageString, overallPercentageString, status);

        logger.info(output);
    }

    public static class LibraryVersion {
        private final String library;
        private final String version;
        private final long count;
        private final long total;
        private final double ratio;

        public LibraryVersion(String library, String version, long count, long total, double ratio) {
            this.library = library;
            this.version = version;
            this.count = count;
            this.total = total;
            this.ratio = ratio;
        }

        public String getLibrary() {
            return library;
        }

        public String getVersion() {
            return version;
        }

        public long getCount() {
            return count;
        }

        public long getTotal() {
            return total;
        }

        public double getRatio() {
            return ratio;
        }
    }
}